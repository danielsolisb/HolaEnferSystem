from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, CreateView, UpdateView, DetailView, DeleteView
from django.contrib.auth.mixins import UserPassesTestMixin
from django.urls import reverse_lazy
from .models import Appointment
from .forms import AppointmentForm
from .forms import ScheduleForm
from django.http import JsonResponse
from CoreApps.customers.models import CustomerProfile
from CoreApps.core.models import City
from CoreApps.appointments.models import Schedule
from CoreApps.appointments.models import Appointment
from django.utils import timezone
from datetime import datetime, timedelta
from django.contrib.auth import get_user_model


User = get_user_model()

# Listar todas las citas (operador y administrador)
class AppointmentListView(LoginRequiredMixin, ListView):
    model = Appointment
    template_name = 'main/appointments/appointment_list.html'
    context_object_name = 'appointments'

    def get_queryset(self):
        return Appointment.objects.select_related(
            'paciente', 'servicio', 'horario', 'estado'
        ).prefetch_related('producto').order_by('-fecha_creacion')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Citas"
        context['subtitle'] = "Listado de citas agendadas"
        return context

# Crear nueva cita
class AppointmentCreateView(LoginRequiredMixin, CreateView):
    model = Appointment
    form_class = AppointmentForm
    template_name = 'main/appointments/appointment_form1.html'
    success_url = reverse_lazy('appointments:appointment-list')

    def form_valid(self, form):
        form.instance.asignado_por = self.request.user
        form.instance.paciente_id = self.request.POST.get('paciente')
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Nueva Cita"
        context['subtitle'] = "Agendar cita para paciente"
        context['ciudades'] = City.objects.all()
        return context

# Detalle de una cita
class AppointmentDetailView(LoginRequiredMixin, DetailView):
    model = Appointment
    template_name = 'main/appointments/appointment_detail.html'
    context_object_name = 'appointment'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Detalle de Cita"
        context['subtitle'] = "Información completa"
        return context

# Editar cita
class AppointmentUpdateView(LoginRequiredMixin, UpdateView):
    model = Appointment
    form_class = AppointmentForm
    template_name = 'main/appointments/appointment_form1.html'
    success_url = reverse_lazy('appointments:appointment-list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Editar Cita"
        context['subtitle'] = "Modificar datos"
        context['ciudades'] = City.objects.all()
        # Datos iniciales solo si existe objeto (modo edición)
        context['ciudad_inicial'] = self.object.paciente.ciudad_id if self.object.paciente else None
        context['paciente_inicial'] = self.object.paciente_id
        context['enfermero_inicial'] = self.object.enfermero_id
        context['horario_inicial'] = self.object.horario_id
        context['hora_inicial'] = self.object.hora.strftime("%H:%M") if self.object.hora else ''
        context['zona_inicial'] = (
            self.object.paciente.zona_id
            if self.object.paciente and self.object.paciente.zona_id
            else None
        )
        context['mapa_inicial'] = self.object.mapa_ubicacion if self.object.mapa_ubicacion else ''

        return context

# Eliminar cita
class AppointmentDeleteView(LoginRequiredMixin, DeleteView):
    model = Appointment
    template_name = 'main/appointments/appointment_confirm_delete.html'
    success_url = reverse_lazy('appointments:appointment-list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Eliminar Cita"
        context['subtitle'] = "Confirmación de eliminación"
        return context

class ScheduleCreateView(LoginRequiredMixin, CreateView):
    model = Schedule
    form_class = ScheduleForm
    template_name = 'main/appointments/schedule_form.html'
    success_url = reverse_lazy('appointments:mis-horarios')

    def form_valid(self, form):
        form.instance.enfermero = self.request.user
        return super().form_valid(form)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Establecer Horarios"
        context['subtitle'] = "Agendar horarios"
        return context

class ScheduleListView(LoginRequiredMixin, ListView):
    model = Schedule
    template_name = 'main/appointments/schedule_list.html'
    context_object_name = 'horarios'

    def get_queryset(self):
        # Base: sólo los horarios del usuario
        qs = Schedule.objects.filter(enfermero=self.request.user)
        # Leemos ?date=YYYY-MM-DD
        date_str = self.request.GET.get('date')
        if date_str:
            try:
                selected = datetime.strptime(date_str, '%Y-%m-%d').date()
            except ValueError:
                selected = timezone.localdate()
        else:
            selected = timezone.localdate()
        # Guardamos en la instancia para usar en el contexto
        self.selected_date = selected
        # Filtramos por esa fecha y ordenamos por hora
        return qs.filter(fecha=selected).order_by('hora_inicio')
    #def get_queryset(self):
    #    return Schedule.objects.filter(enfermero=self.request.user).order_by('-fecha', 'hora_inicio')
    
    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx.update({
            'title': "Lista de Horarios",
            'subtitle': f"Horarios para {self.selected_date.strftime('%d/%m/%Y')}",
            'selected_date': self.selected_date.isoformat(),
        })
        return ctx
    #def get_context_data(self, **kwargs):
    #    context = super().get_context_data(**kwargs)
    #    context['title'] = "Lista de Horarios"
    #    context['subtitle'] = "horarios"
    #    return context

class ScheduleUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Schedule
    form_class = ScheduleForm
    template_name = 'main/appointments/schedule_form.html'
    success_url = reverse_lazy('appointments:mis-horarios')

    def test_func(self):
        return self.get_object().enfermero == self.request.user
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = "Editar Horario"
        context['subtitle'] = "Editar"
        return context

class ScheduleDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Schedule
    template_name = 'main/appointments/schedule_confirm_delete.html'
    success_url = reverse_lazy('appointments:mis-horarios')

    def test_func(self):
        return self.get_object().enfermero == self.request.user



def obtener_pacientes_por_ciudad(request):
    
    ciudad_id = request.GET.get('ciudad_id')
    zona_id   = request.GET.get('zona_id')
    if not ciudad_id:
        return JsonResponse([], safe=False)

    # Base QS filtrada por ciudad, y si llega zona_id, filtramos por zona
    qs = CustomerProfile.objects.filter(ciudad_id=ciudad_id)
    #qs = CustomerProfile.objects.filter(ciudad_id=ciudad_id)
    if zona_id:
        qs = qs.filter(zona_id=zona_id)
    #pacientes = qs.values('id', 'nombres', 'apellidos', 'cedula')
    pacientes = qs.values('id', 'nombres', 'apellidos', 'cedula', 'direccion', 'ubicacion_mapa')
    data = [
        {
            'id': p['id'],
            #'nombre': f"{p['nombres']} {p['apellidos']} ({p['cedula']})"
            'nombre': f"{p['nombres']} {p['apellidos']} ({p['cedula']})",
            'direccion': p['direccion'],
            'mapa': p['ubicacion_mapa']  # Añade esta línea
        }
        for p in pacientes
    ]
    return JsonResponse(data, safe=False)

def obtener_horarios_por_enfermero(request):
    enfermero_id = request.GET.get('enfermero_id')
    if not enfermero_id:
        return JsonResponse([], safe=False)

    horarios = Schedule.objects.filter(enfermero_id=enfermero_id, disponible=True).order_by('fecha', 'hora_inicio')
    data = []

    for h in horarios:
        # Obtener horas ocupadas en citas para este horario
        citas = Appointment.objects.filter(enfermero_id=enfermero_id, horario_id=h.id)
        horas_ocupadas = [c.hora.strftime("%H:%M") for c in citas]

        data.append({
            'id': h.id,
            'texto': f"{h.fecha} - {h.hora_inicio} a {h.hora_fin}",
            'fecha': h.fecha.strftime("%Y-%m-%d"),
            'hora_inicio': h.hora_inicio.strftime("%H:%M"),
            'hora_fin': h.hora_fin.strftime("%H:%M"),
            'ocupadas': horas_ocupadas  # NUEVO CAMPO
        })

    return JsonResponse(data, safe=False)
#def obtener_horarios_por_enfermero(request):
#    enfermero_id = request.GET.get('enfermero_id')
#    if not enfermero_id:
#        return JsonResponse([], safe=False)
#
#    horarios = Schedule.objects.filter(enfermero_id=enfermero_id, disponible=True).order_by('fecha', 'hora_inicio')
#    data = [
#        {
#            'id': h.id,
#            'texto': f"{h.fecha} - {h.hora_inicio} a {h.hora_fin}",
#            'fecha': h.fecha.strftime("%Y-%m-%d"),  # lo importante
#            'hora_inicio': h.hora_inicio.strftime("%H:%M"),
#            'hora_fin': h.hora_fin.strftime("%H:%M"),
#        }
#        for h in horarios
#    ]
#    return JsonResponse(data, safe=False)

def obtener_enfermeros_por_ciudad(request):
    ciudad_id = request.GET.get('ciudad_id')
    zona_id   = request.GET.get('zona_id')
    if not ciudad_id:
        return JsonResponse([], safe=False)

    # Filtramos por ciudad y, si existe zona_id, por esa zona (M2M)
    qs = User.objects.filter(rol='enfermero', ciudad_id=ciudad_id)
    if zona_id:
        qs = qs.filter(zonas__id=zona_id)
    enfermeros = qs.values('id', 'nombres', 'email')
    data = [
        {
            'id': e['id'],
            'nombre': f"{e['nombres']} ({e['email']})"
        }
        for e in enfermeros
    ]
    return JsonResponse(data, safe=False)




#citas de enfermeros logeados para realizar la visualizacion y gestion de las mismas
class AssignedAppointmentListView(LoginRequiredMixin, ListView):
    model = Appointment
    template_name = 'main/appointments/enfermero_appointment_list.html'
    context_object_name = 'appointments'

    def get_queryset(self):
        qs = Appointment.objects.filter(enfermero=self.request.user)
        date_str = self.request.GET.get('date')
        if date_str:
            try:
                selected = datetime.strptime(date_str, '%Y-%m-%d').date()
            except ValueError:
                selected = timezone.localdate()
        else:
            selected = timezone.localdate()
        self.selected_date = selected
        return qs.filter(horario__fecha=selected).order_by('horario__fecha', 'hora')
        
    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['selected_date'] = self.selected_date.isoformat()
        ctx['title']    = "Mis Citas Asignadas"
        ctx['subtitle'] = f"Citas para {self.selected_date.strftime('%d/%m/%Y')}"
        return ctx
    
    #def get_queryset(self):
    #    return Appointment.objects.filter(
    #        enfermero=self.request.user
    #    ).order_by('horario__fecha', 'hora')

class AssignedAppointmentDetailView(LoginRequiredMixin, DetailView):
    model = Appointment
    template_name = 'main/appointments/enfermero_appointment_detail.html'
    context_object_name = 'appointment'
